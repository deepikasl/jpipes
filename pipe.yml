resources:
  - name: sample_scriptrepo
    type: gitRepo
    repoPath: jpline/sample-script
    configuration:
      integrationName: github
      branches:
        except: test_*
      #  only: master_*
      #files:
       # except: tes*
       # only: nod*
      tags:
        except: tes*
       # only: tag*
    initialVersion:
      sha: test
    buildOn:
      tagPush: true
  
  - name: state_reso
    type: state
    
  - name: utility_repo
    type: gitRepo
    repoPath: jpline/sample-script
    configuration:
      integrationName: github
      branches:
        only: test
    initialVersion:
      sha: test
      
  - name: imageDocker
    type: image
    imageName: shippabledocker/sample-node
    configuration:
      integrationName: dockerInt
    initialVersion:
      imageTag: latest
      
  - name: imagePython
    type: image
    imageName: shippabledocker/sample-python
    configuration:
      integrationName: dockerInt
    initialVersion:
      imageTag: latest
 
pipelines:
  - name: pipeline1
    steps:  
      - name: testJob1
        type: bash
        configuration:
          timeoutSeconds: 360
        setup:
          environmentVariables:
            normal:
              ENV1: value1
              ENV3: value3
              ENV4: $ENV3
              STEP_TYPE: update
              PIPELINE_NAME: update
              STEP_NAME: update
         #     RUNNING_IN_CONTAINER: container #this throw error when i update this
            secure:
              ENV2: EpEMlpUSs85U6Y5WmsV5xXUr/GkDpuKP0qH6yy4qPoTbZUSRwmIwWhez+bNSmDJe7lkZN1+syxU1LFmt09QqtSVQpy69brIW1L6vLaHVtBn7hcYGC3dJhmvXUYn/ohpasFj/sab6lwXHQSs+nRYyFRF+ICRzoTB6M17JW/KoLpqJrLL1hBYC1gPSXuWgJT/ZqKWcg+GWhCZT1o9L6IrHrgaMYR3aSmWwGAZoUBWGuTw7/datT6NDhxD6nX64dRdcR+4X0yRnTLPzbxqiMC9qTBw4ChIw5CenyH0tE/AF6YlhoavkyyRBkgd18AQKVNpQneaRN7htnIe+fLEsbKEkwQ==
        triggeredBy:
          resources:
            - sample_scriptrepo
            - utility_repo
            
        requires:
          integrations:
            - dockerInt
          resources:
            - state_reso
        runtime:            
          type: image
          image:
            custom:
              name: drydock/u16all
              tag: v7.2.4
              options: 'privileged: true'
        execution:
          onExecute:
            - printenv
            - echo "hello!"
            - echo "ENV1=$ENV1"
            - echo "ENV2=$ENV2"
            - echo "ENV3=$ENV3"
            - echo "ENV4=$ENV4"
            - echo "STEP_TYPE=$STEP_TYPE"
            - echo "PIPELINE_NAME=$PIPELINE_NAME"
            - echo "STEP_NAME=$STEP_NAME"
          #  - echo "RUNNING_IN_CONTAINER=$RUNNING_IN_CONTAINER"
          
          # ===================== RUN STATE =========================
            - add_run_variable imageTag="firstTest"
            
            - pushd $res_utility_repo_resourcePath
            
            - save_run_state test.sh my_file
            #- restore_run_state my_file test.sh
            
            - save_resource_state state_reso echo.sh my_file
           # - restore_resource_state state_reso my_file echo.sh

            - popd

          onSuccess:
            - echo "ENV1=$ENV1"
            - echo "ENV2=$ENV2"
            - echo "ENV3=$ENV3"
            - echo "STEP_TYPE=$STEP_TYPE"
            - echo "PIPELINE_NAME=$PIPELINE_NAME"
            - echo "STEP_NAME=$STEP_NAME"
          onComplete:
            - echo "ENV1=$ENV1"
            - echo "ENV2=$ENV2"
            - echo "ENV3=$ENV3"
            - echo "STEP_TYPE=$STEP_TYPE"
            - echo "PIPELINE_NAME=$PIPELINE_NAME"
            - echo "STEP_NAME=$STEP_NAME"
          onStart:
            - echo "ENV1=$ENV1"
            - echo "ENV2=$ENV2"
            - echo "ENV3=$ENV3"
          onFailure:
            - echo "ENV1=$ENV1"
            - echo "ENV2=$ENV2"
            - echo "ENV3=$ENV3"
          onCancel:
            - echo "ENV1=$ENV1"
            - echo "ENV2=$ENV2"
            - echo "ENV3=$ENV3"
            
      - name: step_2
        type: bash
        triggeredBy:
          resources:
            - imageDocker
        setup:
          environmentVariables:
            normal:
              ENV1: "'value1 value2 ... valuen'"
              ENV2: "value2 value3 value4"
        execution:
          onExecute:
            - printenv
            - echo "ENV1=$ENV1"
            - echo "ENV2=$ENV2"
            
      - name: step_3
        type: bash
        configuration:
          priority: 4
          timeoutSeconds: 360
        triggeredBy:
          steps:
            - testJob1
        setup:
          environmentVariables:
            normal:
              ENV1: value1
              ENV2: value2
            encrypted:
              SECURE_ENV1: AEb8pmfA/dlxbrphotPCm4t6p9QCbsnMxREHbGaAE0k6ce6wU8NAU4cNTqa4vtM3iYBHe2cUQfcVY9xRSvJig8HQ8McEqBN1gEPhsUwiDXLYmjV7qRihZfRJdRwykkXd9TE6aghY4fgtxhvpqaLfSxa1RBu/7reOxLljBwzNff2Yaqj09glxXd8wo4RRwYXX17FBwaY8Jc88dyTVKEHPEmgi9hId4+Nr3U4WhHkXUZaE1ZiTjbNCbsDq530UK4s8vKO0fpOUT4uIeMZr52KPe6wRvYqf1ykU+NgzVPK2ClFzSc8AQiEKqxCuFrQY0j9qM74JfMIrOamWBvWEc9uenw==
              SECURE_ENV3: KsG4kx2e6vuqJPx0m4PUnEG2kTxVxhDOaKiksfdefibTQtX49GmdMu4dAdxq0R2x8sh6pP6PYynPK4e/j5HQPOYfWRiMEdLwJ2p1UPcFcNfDq6Q5kWB8MDmQP6OikVguNOj8Iu/yicpca+ilNzMRTmVNX5jyn6bjySaIlXeyrGZYaWex3XxxcZfuM8544tktEUiHwMBTPEZV8aL9d1K5dco67IQFgdRfDtnkCfvresi+uTCvE3GULO2vbloXz+J1Bcc/pm+ufUyh2m1ivvsA3nhBFYTcyGz5AWm2qEI/v0ujK9fMLkgLMnjOl3l/X7dI6n8lvHFoI7QYDlpYt4cR3Q==
        execution:
          onExecute:
            - printenv
            - test "$ENV1" == "value1"
            - test "$ENV2" == "value2"
            - test "$SECURE_ENV3" == "secure_value3" 
            - test "$SECURE_ENV1" == "secure_value1"
            - echo "STEP_TYPE=$STEP_TYPE"
            - echo "PIPELINE_NAME=$PIPELINE_NAME"
            - echo "STEP_NAME=$STEP_NAME"
          onStart:
            - echo "on start"
            - test "$ENV1" == "value1"
            - test "$ENV2" == "value2"
            - test "$SECURE_ENV3" == "secure_value3" 
            - test "$SECURE_ENV1" == "secure_value1"
          onSuccess:
            - echo "on success!"
            - test "$ENV1" == "value1"
            - test "$ENV2" == "value2"
            - test "$SECURE_ENV3" == "secure_value3" 
            - test "$SECURE_ENV1" == "secure_value1"
          onFailure:
            - echo "something went wrong"
            - test "$ENV1" == "value1"
            - test "$ENV2" == "value2"
            - test "$SECURE_ENV3" == "secure_value3" 
            - test "$SECURE_ENV1" == "secure_value1"
          onComplete: 
            - echo "step is done!"
            - test "$ENV1" == "value1"
            - test "$ENV2" == "value2"
            - test "$SECURE_ENV3" == "secure_value3" 
            - test "$SECURE_ENV1" == "secure_value1"
          onCancel:
            - echo "cancelled this job"
            - test "$ENV1" == "value1"
            - test "$ENV2" == "value2"
            - test "$SECURE_ENV3" == "secure_value3" 
            - test "$SECURE_ENV1" == "secure_value1"
            
      - name: step_4
        type: bash
        configuration:
          priority: 5
        triggeredBy:
          steps:
            - testJob1
        execution:
          onExecute:
            - printenv
            - echo "ENV1=$ENV1"
            - echo "ENV2=$ENV2"
            - echo "ENV3=$ENV3"
            - echo "STEP_TYPE=$STEP_TYPE"
            - echo "PIPELINE_NAME=$PIPELINE_NAME"
            - echo "STEP_NAME=$STEP_NAME"
            - echo "imageTag=$imageTag"
            - cat /jfrog/pipelines/pipeline1/runs/54/workspace/run.env
            - restore_run_state my_file test.sh
            - restore_resource_state state_reso my_file echo.sh
       
  - name: pipeline2
    steps:    
      - name: step_pl2
        type: bash
        execution:
          onExecute:
            - printenv
  
      - name: utility_step
        type: bash
        triggeredBy:
          resources:
            - utility_repo
        requires:
          integrations:
            - pemkey
            - notifySlack
        runtime:            
          type: image
          image:
            auto:
              language: python
              version: 3.6
        execution:
          onExecute:
           # - docker pull drydock/u16node:master
            - printenv
            - echo "verify all utility functions"
            - bump_semver v8.2.0 patch
            - echo "expected result v2.0.0 for above command"
            - compare_git --resource utility_repo --commit-range HEAD~3..HEAD test.sh
            
            - update_commit_status utility_repo --status processing --message "updated in utility step" --context $STEP_NAME
            
            - switch_env nodejs 8.16.0
            
            - pushd $res_utility_repo_resourcePath
            - ls -la
            - read_json keys.json "DOCKER_USERNAME"
            
            # ============ encrypt and decrypt utility functions =================
            
            - openssl genrsa -out key.pem 1024 
            - openssl rsa -in key.pem -text -noout
            - openssl rsa -in key.pem -pubout -out pub.pem 
            - openssl rsa -in pub.pem -pubin -text -noout 
            
            - encrypt_string "secretValue" --key pub.pem
            - encrypted=$(encrypt_string "secretValue" --key pub.pem)
            - echo "$encrypted"
            - decrypt_string "$encrypted" --key key.pem
            
           # - encrypt_file --output encrypted.txt cryptIn.txt --key pub.pem
           # - cat encrypted.txt
           # - decrypt_file encrypted.txt --output decrypted.txt --key key.pem
           # - cat decrypted.txt
            
            - replace_envs example.env sample.env
            
            - cat sample.env
            - cat example.env
  
            - cache_files echo.sh my_file
            - restore_cache my_file echo.sh
            
            
            - popd
            
            - send_notification notifySlack
           # - write_output imagePython "imageTag=master" "sha=$res_utility_repo_commitSha"
            - execute_command echo $res_utility_repo_resourcePath
          #  - retry_command "git clone git@bitbucket.org:shiptest-rc-me/testprivate.git"

         #   - replicate_resource imageDocker imagePython
         
        outputResources:
          - imagePython
            
